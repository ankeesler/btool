// Code generated by counterfeiter. DO NOT EDIT.
package collector0fakes

import (
	"sync"

	collector "github.com/ankeesler/btool/collector0"
	"github.com/ankeesler/btool/node"
)

type FakeStore struct {
	ForEachStub        func(func(*node.Node))
	forEachMutex       sync.RWMutex
	forEachArgsForCall []struct {
		arg1 func(*node.Node)
	}
	GetStub        func(string) *node.Node
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 string
	}
	getReturns struct {
		result1 *node.Node
	}
	getReturnsOnCall map[int]struct {
		result1 *node.Node
	}
	SetStub        func(*node.Node)
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 *node.Node
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) ForEach(arg1 func(*node.Node)) {
	fake.forEachMutex.Lock()
	fake.forEachArgsForCall = append(fake.forEachArgsForCall, struct {
		arg1 func(*node.Node)
	}{arg1})
	fake.recordInvocation("ForEach", []interface{}{arg1})
	fake.forEachMutex.Unlock()
	if fake.ForEachStub != nil {
		fake.ForEachStub(arg1)
	}
}

func (fake *FakeStore) ForEachCallCount() int {
	fake.forEachMutex.RLock()
	defer fake.forEachMutex.RUnlock()
	return len(fake.forEachArgsForCall)
}

func (fake *FakeStore) ForEachCalls(stub func(func(*node.Node))) {
	fake.forEachMutex.Lock()
	defer fake.forEachMutex.Unlock()
	fake.ForEachStub = stub
}

func (fake *FakeStore) ForEachArgsForCall(i int) func(*node.Node) {
	fake.forEachMutex.RLock()
	defer fake.forEachMutex.RUnlock()
	argsForCall := fake.forEachArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStore) Get(arg1 string) *node.Node {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1
}

func (fake *FakeStore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeStore) GetCalls(stub func(string) *node.Node) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeStore) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStore) GetReturns(result1 *node.Node) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *node.Node
	}{result1}
}

func (fake *FakeStore) GetReturnsOnCall(i int, result1 *node.Node) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *node.Node
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *node.Node
	}{result1}
}

func (fake *FakeStore) Set(arg1 *node.Node) {
	fake.setMutex.Lock()
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 *node.Node
	}{arg1})
	fake.recordInvocation("Set", []interface{}{arg1})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		fake.SetStub(arg1)
	}
}

func (fake *FakeStore) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeStore) SetCalls(stub func(*node.Node)) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *FakeStore) SetArgsForCall(i int) *node.Node {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.forEachMutex.RLock()
	defer fake.forEachMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ collector.Store = new(FakeStore)
