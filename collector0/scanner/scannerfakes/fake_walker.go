// Code generated by counterfeiter. DO NOT EDIT.
package scannerfakes

import (
	"sync"

	"github.com/ankeesler/btool/collector0/scanner"
)

type FakeWalker struct {
	WalkStub        func(string, []string) ([]string, error)
	walkMutex       sync.RWMutex
	walkArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	walkReturns struct {
		result1 []string
		result2 error
	}
	walkReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWalker) Walk(arg1 string, arg2 []string) ([]string, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.walkMutex.Lock()
	ret, specificReturn := fake.walkReturnsOnCall[len(fake.walkArgsForCall)]
	fake.walkArgsForCall = append(fake.walkArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2Copy})
	fake.recordInvocation("Walk", []interface{}{arg1, arg2Copy})
	fake.walkMutex.Unlock()
	if fake.WalkStub != nil {
		return fake.WalkStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.walkReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWalker) WalkCallCount() int {
	fake.walkMutex.RLock()
	defer fake.walkMutex.RUnlock()
	return len(fake.walkArgsForCall)
}

func (fake *FakeWalker) WalkCalls(stub func(string, []string) ([]string, error)) {
	fake.walkMutex.Lock()
	defer fake.walkMutex.Unlock()
	fake.WalkStub = stub
}

func (fake *FakeWalker) WalkArgsForCall(i int) (string, []string) {
	fake.walkMutex.RLock()
	defer fake.walkMutex.RUnlock()
	argsForCall := fake.walkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeWalker) WalkReturns(result1 []string, result2 error) {
	fake.walkMutex.Lock()
	defer fake.walkMutex.Unlock()
	fake.WalkStub = nil
	fake.walkReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeWalker) WalkReturnsOnCall(i int, result1 []string, result2 error) {
	fake.walkMutex.Lock()
	defer fake.walkMutex.Unlock()
	fake.WalkStub = nil
	if fake.walkReturnsOnCall == nil {
		fake.walkReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.walkReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeWalker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.walkMutex.RLock()
	defer fake.walkMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWalker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scanner.Walker = new(FakeWalker)
