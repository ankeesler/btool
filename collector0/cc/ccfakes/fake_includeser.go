// Code generated by counterfeiter. DO NOT EDIT.
package ccfakes

import (
	"sync"

	"github.com/ankeesler/btool/collector0/cc"
)

type FakeIncludeser struct {
	IncludesStub        func(string) ([]string, error)
	includesMutex       sync.RWMutex
	includesArgsForCall []struct {
		arg1 string
	}
	includesReturns struct {
		result1 []string
		result2 error
	}
	includesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIncludeser) Includes(arg1 string) ([]string, error) {
	fake.includesMutex.Lock()
	ret, specificReturn := fake.includesReturnsOnCall[len(fake.includesArgsForCall)]
	fake.includesArgsForCall = append(fake.includesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Includes", []interface{}{arg1})
	fake.includesMutex.Unlock()
	if fake.IncludesStub != nil {
		return fake.IncludesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.includesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIncludeser) IncludesCallCount() int {
	fake.includesMutex.RLock()
	defer fake.includesMutex.RUnlock()
	return len(fake.includesArgsForCall)
}

func (fake *FakeIncludeser) IncludesCalls(stub func(string) ([]string, error)) {
	fake.includesMutex.Lock()
	defer fake.includesMutex.Unlock()
	fake.IncludesStub = stub
}

func (fake *FakeIncludeser) IncludesArgsForCall(i int) string {
	fake.includesMutex.RLock()
	defer fake.includesMutex.RUnlock()
	argsForCall := fake.includesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeIncludeser) IncludesReturns(result1 []string, result2 error) {
	fake.includesMutex.Lock()
	defer fake.includesMutex.Unlock()
	fake.IncludesStub = nil
	fake.includesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeIncludeser) IncludesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.includesMutex.Lock()
	defer fake.includesMutex.Unlock()
	fake.IncludesStub = nil
	if fake.includesReturnsOnCall == nil {
		fake.includesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.includesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeIncludeser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.includesMutex.RLock()
	defer fake.includesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIncludeser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cc.Includeser = new(FakeIncludeser)
