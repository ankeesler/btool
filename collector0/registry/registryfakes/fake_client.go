// Code generated by counterfeiter. DO NOT EDIT.
package registryfakes

import (
	"sync"

	"github.com/ankeesler/btool/collector/registry"
	registrya "github.com/ankeesler/btool/registry"
)

type FakeClient struct {
	GaggleStub        func(string) (*registrya.Gaggle, error)
	gaggleMutex       sync.RWMutex
	gaggleArgsForCall []struct {
		arg1 string
	}
	gaggleReturns struct {
		result1 *registrya.Gaggle
		result2 error
	}
	gaggleReturnsOnCall map[int]struct {
		result1 *registrya.Gaggle
		result2 error
	}
	IndexStub        func() (*registrya.Index, error)
	indexMutex       sync.RWMutex
	indexArgsForCall []struct {
	}
	indexReturns struct {
		result1 *registrya.Index
		result2 error
	}
	indexReturnsOnCall map[int]struct {
		result1 *registrya.Index
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Gaggle(arg1 string) (*registrya.Gaggle, error) {
	fake.gaggleMutex.Lock()
	ret, specificReturn := fake.gaggleReturnsOnCall[len(fake.gaggleArgsForCall)]
	fake.gaggleArgsForCall = append(fake.gaggleArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Gaggle", []interface{}{arg1})
	fake.gaggleMutex.Unlock()
	if fake.GaggleStub != nil {
		return fake.GaggleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.gaggleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GaggleCallCount() int {
	fake.gaggleMutex.RLock()
	defer fake.gaggleMutex.RUnlock()
	return len(fake.gaggleArgsForCall)
}

func (fake *FakeClient) GaggleCalls(stub func(string) (*registrya.Gaggle, error)) {
	fake.gaggleMutex.Lock()
	defer fake.gaggleMutex.Unlock()
	fake.GaggleStub = stub
}

func (fake *FakeClient) GaggleArgsForCall(i int) string {
	fake.gaggleMutex.RLock()
	defer fake.gaggleMutex.RUnlock()
	argsForCall := fake.gaggleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GaggleReturns(result1 *registrya.Gaggle, result2 error) {
	fake.gaggleMutex.Lock()
	defer fake.gaggleMutex.Unlock()
	fake.GaggleStub = nil
	fake.gaggleReturns = struct {
		result1 *registrya.Gaggle
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GaggleReturnsOnCall(i int, result1 *registrya.Gaggle, result2 error) {
	fake.gaggleMutex.Lock()
	defer fake.gaggleMutex.Unlock()
	fake.GaggleStub = nil
	if fake.gaggleReturnsOnCall == nil {
		fake.gaggleReturnsOnCall = make(map[int]struct {
			result1 *registrya.Gaggle
			result2 error
		})
	}
	fake.gaggleReturnsOnCall[i] = struct {
		result1 *registrya.Gaggle
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Index() (*registrya.Index, error) {
	fake.indexMutex.Lock()
	ret, specificReturn := fake.indexReturnsOnCall[len(fake.indexArgsForCall)]
	fake.indexArgsForCall = append(fake.indexArgsForCall, struct {
	}{})
	fake.recordInvocation("Index", []interface{}{})
	fake.indexMutex.Unlock()
	if fake.IndexStub != nil {
		return fake.IndexStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.indexReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) IndexCallCount() int {
	fake.indexMutex.RLock()
	defer fake.indexMutex.RUnlock()
	return len(fake.indexArgsForCall)
}

func (fake *FakeClient) IndexCalls(stub func() (*registrya.Index, error)) {
	fake.indexMutex.Lock()
	defer fake.indexMutex.Unlock()
	fake.IndexStub = stub
}

func (fake *FakeClient) IndexReturns(result1 *registrya.Index, result2 error) {
	fake.indexMutex.Lock()
	defer fake.indexMutex.Unlock()
	fake.IndexStub = nil
	fake.indexReturns = struct {
		result1 *registrya.Index
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) IndexReturnsOnCall(i int, result1 *registrya.Index, result2 error) {
	fake.indexMutex.Lock()
	defer fake.indexMutex.Unlock()
	fake.IndexStub = nil
	if fake.indexReturnsOnCall == nil {
		fake.indexReturnsOnCall = make(map[int]struct {
			result1 *registrya.Index
			result2 error
		})
	}
	fake.indexReturnsOnCall[i] = struct {
		result1 *registrya.Index
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.gaggleMutex.RLock()
	defer fake.gaggleMutex.RUnlock()
	fake.indexMutex.RLock()
	defer fake.indexMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ registry.Client = new(FakeClient)
