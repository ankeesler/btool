// Code generated by counterfeiter. DO NOT EDIT.
package nodefakes

import (
	"sync"

	"github.com/ankeesler/btool/node"
)

type FakeHandler struct {
	HandleStub        func([]*node.Node) ([]*node.Node, error)
	handleMutex       sync.RWMutex
	handleArgsForCall []struct {
		arg1 []*node.Node
	}
	handleReturns struct {
		result1 []*node.Node
		result2 error
	}
	handleReturnsOnCall map[int]struct {
		result1 []*node.Node
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) Handle(arg1 []*node.Node) ([]*node.Node, error) {
	var arg1Copy []*node.Node
	if arg1 != nil {
		arg1Copy = make([]*node.Node, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.handleMutex.Lock()
	ret, specificReturn := fake.handleReturnsOnCall[len(fake.handleArgsForCall)]
	fake.handleArgsForCall = append(fake.handleArgsForCall, struct {
		arg1 []*node.Node
	}{arg1Copy})
	fake.recordInvocation("Handle", []interface{}{arg1Copy})
	fake.handleMutex.Unlock()
	if fake.HandleStub != nil {
		return fake.HandleStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.handleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHandler) HandleCallCount() int {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	return len(fake.handleArgsForCall)
}

func (fake *FakeHandler) HandleCalls(stub func([]*node.Node) ([]*node.Node, error)) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = stub
}

func (fake *FakeHandler) HandleArgsForCall(i int) []*node.Node {
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	argsForCall := fake.handleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandler) HandleReturns(result1 []*node.Node, result2 error) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = nil
	fake.handleReturns = struct {
		result1 []*node.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) HandleReturnsOnCall(i int, result1 []*node.Node, result2 error) {
	fake.handleMutex.Lock()
	defer fake.handleMutex.Unlock()
	fake.HandleStub = nil
	if fake.handleReturnsOnCall == nil {
		fake.handleReturnsOnCall = make(map[int]struct {
			result1 []*node.Node
			result2 error
		})
	}
	fake.handleReturnsOnCall[i] = struct {
		result1 []*node.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleMutex.RLock()
	defer fake.handleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ node.Handler = new(FakeHandler)
