// Code generated by counterfeiter. DO NOT EDIT.
package registryfakes

import (
	"sync"

	"github.com/ankeesler/btool/node"
	"github.com/ankeesler/btool/node/registry"
)

type FakeResolverMapper struct {
	MapStub        func(string, map[string]interface{}) (node.Resolver, error)
	mapMutex       sync.RWMutex
	mapArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	mapReturns struct {
		result1 node.Resolver
		result2 error
	}
	mapReturnsOnCall map[int]struct {
		result1 node.Resolver
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResolverMapper) Map(arg1 string, arg2 map[string]interface{}) (node.Resolver, error) {
	fake.mapMutex.Lock()
	ret, specificReturn := fake.mapReturnsOnCall[len(fake.mapArgsForCall)]
	fake.mapArgsForCall = append(fake.mapArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	fake.recordInvocation("Map", []interface{}{arg1, arg2})
	fake.mapMutex.Unlock()
	if fake.MapStub != nil {
		return fake.MapStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.mapReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResolverMapper) MapCallCount() int {
	fake.mapMutex.RLock()
	defer fake.mapMutex.RUnlock()
	return len(fake.mapArgsForCall)
}

func (fake *FakeResolverMapper) MapCalls(stub func(string, map[string]interface{}) (node.Resolver, error)) {
	fake.mapMutex.Lock()
	defer fake.mapMutex.Unlock()
	fake.MapStub = stub
}

func (fake *FakeResolverMapper) MapArgsForCall(i int) (string, map[string]interface{}) {
	fake.mapMutex.RLock()
	defer fake.mapMutex.RUnlock()
	argsForCall := fake.mapArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeResolverMapper) MapReturns(result1 node.Resolver, result2 error) {
	fake.mapMutex.Lock()
	defer fake.mapMutex.Unlock()
	fake.MapStub = nil
	fake.mapReturns = struct {
		result1 node.Resolver
		result2 error
	}{result1, result2}
}

func (fake *FakeResolverMapper) MapReturnsOnCall(i int, result1 node.Resolver, result2 error) {
	fake.mapMutex.Lock()
	defer fake.mapMutex.Unlock()
	fake.MapStub = nil
	if fake.mapReturnsOnCall == nil {
		fake.mapReturnsOnCall = make(map[int]struct {
			result1 node.Resolver
			result2 error
		})
	}
	fake.mapReturnsOnCall[i] = struct {
		result1 node.Resolver
		result2 error
	}{result1, result2}
}

func (fake *FakeResolverMapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mapMutex.RLock()
	defer fake.mapMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResolverMapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ registry.ResolverMapper = new(FakeResolverMapper)
