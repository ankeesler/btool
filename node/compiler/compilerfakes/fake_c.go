// Code generated by counterfeiter. DO NOT EDIT.
package compilerfakes

import (
	"sync"

	"github.com/ankeesler/btool/node/compiler"
)

type FakeC struct {
	CompileCStub        func(string, string, []string) error
	compileCMutex       sync.RWMutex
	compileCArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	compileCReturns struct {
		result1 error
	}
	compileCReturnsOnCall map[int]struct {
		result1 error
	}
	CompileCCStub        func(string, string, []string) error
	compileCCMutex       sync.RWMutex
	compileCCArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []string
	}
	compileCCReturns struct {
		result1 error
	}
	compileCCReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeC) CompileC(arg1 string, arg2 string, arg3 []string) error {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.compileCMutex.Lock()
	ret, specificReturn := fake.compileCReturnsOnCall[len(fake.compileCArgsForCall)]
	fake.compileCArgsForCall = append(fake.compileCArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("CompileC", []interface{}{arg1, arg2, arg3Copy})
	fake.compileCMutex.Unlock()
	if fake.CompileCStub != nil {
		return fake.CompileCStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.compileCReturns
	return fakeReturns.result1
}

func (fake *FakeC) CompileCCallCount() int {
	fake.compileCMutex.RLock()
	defer fake.compileCMutex.RUnlock()
	return len(fake.compileCArgsForCall)
}

func (fake *FakeC) CompileCCalls(stub func(string, string, []string) error) {
	fake.compileCMutex.Lock()
	defer fake.compileCMutex.Unlock()
	fake.CompileCStub = stub
}

func (fake *FakeC) CompileCArgsForCall(i int) (string, string, []string) {
	fake.compileCMutex.RLock()
	defer fake.compileCMutex.RUnlock()
	argsForCall := fake.compileCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeC) CompileCReturns(result1 error) {
	fake.compileCMutex.Lock()
	defer fake.compileCMutex.Unlock()
	fake.CompileCStub = nil
	fake.compileCReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeC) CompileCReturnsOnCall(i int, result1 error) {
	fake.compileCMutex.Lock()
	defer fake.compileCMutex.Unlock()
	fake.CompileCStub = nil
	if fake.compileCReturnsOnCall == nil {
		fake.compileCReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.compileCReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeC) CompileCC(arg1 string, arg2 string, arg3 []string) error {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.compileCCMutex.Lock()
	ret, specificReturn := fake.compileCCReturnsOnCall[len(fake.compileCCArgsForCall)]
	fake.compileCCArgsForCall = append(fake.compileCCArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("CompileCC", []interface{}{arg1, arg2, arg3Copy})
	fake.compileCCMutex.Unlock()
	if fake.CompileCCStub != nil {
		return fake.CompileCCStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.compileCCReturns
	return fakeReturns.result1
}

func (fake *FakeC) CompileCCCallCount() int {
	fake.compileCCMutex.RLock()
	defer fake.compileCCMutex.RUnlock()
	return len(fake.compileCCArgsForCall)
}

func (fake *FakeC) CompileCCCalls(stub func(string, string, []string) error) {
	fake.compileCCMutex.Lock()
	defer fake.compileCCMutex.Unlock()
	fake.CompileCCStub = stub
}

func (fake *FakeC) CompileCCArgsForCall(i int) (string, string, []string) {
	fake.compileCCMutex.RLock()
	defer fake.compileCCMutex.RUnlock()
	argsForCall := fake.compileCCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeC) CompileCCReturns(result1 error) {
	fake.compileCCMutex.Lock()
	defer fake.compileCCMutex.Unlock()
	fake.CompileCCStub = nil
	fake.compileCCReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeC) CompileCCReturnsOnCall(i int, result1 error) {
	fake.compileCCMutex.Lock()
	defer fake.compileCCMutex.Unlock()
	fake.CompileCCStub = nil
	if fake.compileCCReturnsOnCall == nil {
		fake.compileCCReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.compileCCReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeC) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.compileCMutex.RLock()
	defer fake.compileCMutex.RUnlock()
	fake.compileCCMutex.RLock()
	defer fake.compileCCMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeC) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ compiler.C = new(FakeC)
