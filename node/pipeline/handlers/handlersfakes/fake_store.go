// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"github.com/ankeesler/btool/node/pipeline/handlers"
)

type FakeStore struct {
	ProjectDirStub        func(string) (string, error)
	projectDirMutex       sync.RWMutex
	projectDirArgsForCall []struct {
		arg1 string
	}
	projectDirReturns struct {
		result1 string
		result2 error
	}
	projectDirReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RegistryDirStub        func(string) (string, error)
	registryDirMutex       sync.RWMutex
	registryDirArgsForCall []struct {
		arg1 string
	}
	registryDirReturns struct {
		result1 string
		result2 error
	}
	registryDirReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) ProjectDir(arg1 string) (string, error) {
	fake.projectDirMutex.Lock()
	ret, specificReturn := fake.projectDirReturnsOnCall[len(fake.projectDirArgsForCall)]
	fake.projectDirArgsForCall = append(fake.projectDirArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ProjectDir", []interface{}{arg1})
	fake.projectDirMutex.Unlock()
	if fake.ProjectDirStub != nil {
		return fake.ProjectDirStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.projectDirReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) ProjectDirCallCount() int {
	fake.projectDirMutex.RLock()
	defer fake.projectDirMutex.RUnlock()
	return len(fake.projectDirArgsForCall)
}

func (fake *FakeStore) ProjectDirCalls(stub func(string) (string, error)) {
	fake.projectDirMutex.Lock()
	defer fake.projectDirMutex.Unlock()
	fake.ProjectDirStub = stub
}

func (fake *FakeStore) ProjectDirArgsForCall(i int) string {
	fake.projectDirMutex.RLock()
	defer fake.projectDirMutex.RUnlock()
	argsForCall := fake.projectDirArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStore) ProjectDirReturns(result1 string, result2 error) {
	fake.projectDirMutex.Lock()
	defer fake.projectDirMutex.Unlock()
	fake.ProjectDirStub = nil
	fake.projectDirReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) ProjectDirReturnsOnCall(i int, result1 string, result2 error) {
	fake.projectDirMutex.Lock()
	defer fake.projectDirMutex.Unlock()
	fake.ProjectDirStub = nil
	if fake.projectDirReturnsOnCall == nil {
		fake.projectDirReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.projectDirReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) RegistryDir(arg1 string) (string, error) {
	fake.registryDirMutex.Lock()
	ret, specificReturn := fake.registryDirReturnsOnCall[len(fake.registryDirArgsForCall)]
	fake.registryDirArgsForCall = append(fake.registryDirArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RegistryDir", []interface{}{arg1})
	fake.registryDirMutex.Unlock()
	if fake.RegistryDirStub != nil {
		return fake.RegistryDirStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registryDirReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) RegistryDirCallCount() int {
	fake.registryDirMutex.RLock()
	defer fake.registryDirMutex.RUnlock()
	return len(fake.registryDirArgsForCall)
}

func (fake *FakeStore) RegistryDirCalls(stub func(string) (string, error)) {
	fake.registryDirMutex.Lock()
	defer fake.registryDirMutex.Unlock()
	fake.RegistryDirStub = stub
}

func (fake *FakeStore) RegistryDirArgsForCall(i int) string {
	fake.registryDirMutex.RLock()
	defer fake.registryDirMutex.RUnlock()
	argsForCall := fake.registryDirArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStore) RegistryDirReturns(result1 string, result2 error) {
	fake.registryDirMutex.Lock()
	defer fake.registryDirMutex.Unlock()
	fake.RegistryDirStub = nil
	fake.registryDirReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) RegistryDirReturnsOnCall(i int, result1 string, result2 error) {
	fake.registryDirMutex.Lock()
	defer fake.registryDirMutex.Unlock()
	fake.RegistryDirStub = nil
	if fake.registryDirReturnsOnCall == nil {
		fake.registryDirReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.registryDirReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.projectDirMutex.RLock()
	defer fake.projectDirMutex.RUnlock()
	fake.registryDirMutex.RLock()
	defer fake.registryDirMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.Store = new(FakeStore)
