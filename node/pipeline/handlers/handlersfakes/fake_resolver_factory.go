// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"github.com/ankeesler/btool/node"
	"github.com/ankeesler/btool/node/pipeline/handlers"
)

type FakeResolverFactory struct {
	NewResolverStub        func(string, map[string]interface{}) (node.Resolver, error)
	newResolverMutex       sync.RWMutex
	newResolverArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	newResolverReturns struct {
		result1 node.Resolver
		result2 error
	}
	newResolverReturnsOnCall map[int]struct {
		result1 node.Resolver
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResolverFactory) NewResolver(arg1 string, arg2 map[string]interface{}) (node.Resolver, error) {
	fake.newResolverMutex.Lock()
	ret, specificReturn := fake.newResolverReturnsOnCall[len(fake.newResolverArgsForCall)]
	fake.newResolverArgsForCall = append(fake.newResolverArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	fake.recordInvocation("NewResolver", []interface{}{arg1, arg2})
	fake.newResolverMutex.Unlock()
	if fake.NewResolverStub != nil {
		return fake.NewResolverStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newResolverReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResolverFactory) NewResolverCallCount() int {
	fake.newResolverMutex.RLock()
	defer fake.newResolverMutex.RUnlock()
	return len(fake.newResolverArgsForCall)
}

func (fake *FakeResolverFactory) NewResolverCalls(stub func(string, map[string]interface{}) (node.Resolver, error)) {
	fake.newResolverMutex.Lock()
	defer fake.newResolverMutex.Unlock()
	fake.NewResolverStub = stub
}

func (fake *FakeResolverFactory) NewResolverArgsForCall(i int) (string, map[string]interface{}) {
	fake.newResolverMutex.RLock()
	defer fake.newResolverMutex.RUnlock()
	argsForCall := fake.newResolverArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeResolverFactory) NewResolverReturns(result1 node.Resolver, result2 error) {
	fake.newResolverMutex.Lock()
	defer fake.newResolverMutex.Unlock()
	fake.NewResolverStub = nil
	fake.newResolverReturns = struct {
		result1 node.Resolver
		result2 error
	}{result1, result2}
}

func (fake *FakeResolverFactory) NewResolverReturnsOnCall(i int, result1 node.Resolver, result2 error) {
	fake.newResolverMutex.Lock()
	defer fake.newResolverMutex.Unlock()
	fake.NewResolverStub = nil
	if fake.newResolverReturnsOnCall == nil {
		fake.newResolverReturnsOnCall = make(map[int]struct {
			result1 node.Resolver
			result2 error
		})
	}
	fake.newResolverReturnsOnCall[i] = struct {
		result1 node.Resolver
		result2 error
	}{result1, result2}
}

func (fake *FakeResolverFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newResolverMutex.RLock()
	defer fake.newResolverMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResolverFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.ResolverFactory = new(FakeResolverFactory)
