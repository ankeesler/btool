// Code generated by counterfeiter. DO NOT EDIT.
package v1fakes

import (
	"context"
	"sync"

	node "github.com/ankeesler/btool/node/api/v1"
	"google.golang.org/grpc"
)

type FakeRegistryClient struct {
	ListRepositoriesStub        func(context.Context, *node.ListRepositoriesRequest, ...grpc.CallOption) (*node.ListRepositoriesResponse, error)
	listRepositoriesMutex       sync.RWMutex
	listRepositoriesArgsForCall []struct {
		arg1 context.Context
		arg2 *node.ListRepositoriesRequest
		arg3 []grpc.CallOption
	}
	listRepositoriesReturns struct {
		result1 *node.ListRepositoriesResponse
		result2 error
	}
	listRepositoriesReturnsOnCall map[int]struct {
		result1 *node.ListRepositoriesResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRegistryClient) ListRepositories(arg1 context.Context, arg2 *node.ListRepositoriesRequest, arg3 ...grpc.CallOption) (*node.ListRepositoriesResponse, error) {
	fake.listRepositoriesMutex.Lock()
	ret, specificReturn := fake.listRepositoriesReturnsOnCall[len(fake.listRepositoriesArgsForCall)]
	fake.listRepositoriesArgsForCall = append(fake.listRepositoriesArgsForCall, struct {
		arg1 context.Context
		arg2 *node.ListRepositoriesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListRepositories", []interface{}{arg1, arg2, arg3})
	fake.listRepositoriesMutex.Unlock()
	if fake.ListRepositoriesStub != nil {
		return fake.ListRepositoriesStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRepositoriesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) ListRepositoriesCallCount() int {
	fake.listRepositoriesMutex.RLock()
	defer fake.listRepositoriesMutex.RUnlock()
	return len(fake.listRepositoriesArgsForCall)
}

func (fake *FakeRegistryClient) ListRepositoriesCalls(stub func(context.Context, *node.ListRepositoriesRequest, ...grpc.CallOption) (*node.ListRepositoriesResponse, error)) {
	fake.listRepositoriesMutex.Lock()
	defer fake.listRepositoriesMutex.Unlock()
	fake.ListRepositoriesStub = stub
}

func (fake *FakeRegistryClient) ListRepositoriesArgsForCall(i int) (context.Context, *node.ListRepositoriesRequest, []grpc.CallOption) {
	fake.listRepositoriesMutex.RLock()
	defer fake.listRepositoriesMutex.RUnlock()
	argsForCall := fake.listRepositoriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) ListRepositoriesReturns(result1 *node.ListRepositoriesResponse, result2 error) {
	fake.listRepositoriesMutex.Lock()
	defer fake.listRepositoriesMutex.Unlock()
	fake.ListRepositoriesStub = nil
	fake.listRepositoriesReturns = struct {
		result1 *node.ListRepositoriesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) ListRepositoriesReturnsOnCall(i int, result1 *node.ListRepositoriesResponse, result2 error) {
	fake.listRepositoriesMutex.Lock()
	defer fake.listRepositoriesMutex.Unlock()
	fake.ListRepositoriesStub = nil
	if fake.listRepositoriesReturnsOnCall == nil {
		fake.listRepositoriesReturnsOnCall = make(map[int]struct {
			result1 *node.ListRepositoriesResponse
			result2 error
		})
	}
	fake.listRepositoriesReturnsOnCall[i] = struct {
		result1 *node.ListRepositoriesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listRepositoriesMutex.RLock()
	defer fake.listRepositoriesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRegistryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ node.RegistryClient = new(FakeRegistryClient)
