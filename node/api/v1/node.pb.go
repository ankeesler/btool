// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/node.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListRepositoriesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRepositoriesRequest) Reset()         { *m = ListRepositoriesRequest{} }
func (m *ListRepositoriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListRepositoriesRequest) ProtoMessage()    {}
func (*ListRepositoriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{0}
}

func (m *ListRepositoriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoriesRequest.Unmarshal(m, b)
}
func (m *ListRepositoriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoriesRequest.Marshal(b, m, deterministic)
}
func (m *ListRepositoriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoriesRequest.Merge(m, src)
}
func (m *ListRepositoriesRequest) XXX_Size() int {
	return xxx_messageInfo_ListRepositoriesRequest.Size(m)
}
func (m *ListRepositoriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoriesRequest proto.InternalMessageInfo

type ListRepositoriesResponse struct {
	// The list of requested repositories.
	Repositories         []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListRepositoriesResponse) Reset()         { *m = ListRepositoriesResponse{} }
func (m *ListRepositoriesResponse) String() string { return proto.CompactTextString(m) }
func (*ListRepositoriesResponse) ProtoMessage()    {}
func (*ListRepositoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{1}
}

func (m *ListRepositoriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoriesResponse.Unmarshal(m, b)
}
func (m *ListRepositoriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoriesResponse.Marshal(b, m, deterministic)
}
func (m *ListRepositoriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoriesResponse.Merge(m, src)
}
func (m *ListRepositoriesResponse) XXX_Size() int {
	return xxx_messageInfo_ListRepositoriesResponse.Size(m)
}
func (m *ListRepositoriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoriesResponse proto.InternalMessageInfo

func (m *ListRepositoriesResponse) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

type Repository struct {
	// The name of the repository.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The revision of this repository.
	//
	// This should be different for every mutation of the repository (i.e., when the
	// Nodes change in this repository, this string should change.
	//
	// Said another way, this version should change iff any Node data changes in
	// this repository.
	Revision string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// The btool Nodes in this repository.
	Nodes                []*Node  `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{2}
}

func (m *Repository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository.Unmarshal(m, b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return xxx_messageInfo_Repository.Size(m)
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *Repository) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Node struct {
	// The name of this Node.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The names of the dependencies of this Node.
	Dependencies []string `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// Opaque metadata associated with this Node.
	Labels *_struct.Struct `protobuf:"bytes,3,opt,name=labels,proto3" json:"labels,omitempty"`
	// This Node's Resolver.
	Resolver             *Resolver `protobuf:"bytes,4,opt,name=resolver,proto3" json:"resolver,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{3}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Node) GetLabels() *_struct.Struct {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Node) GetResolver() *Resolver {
	if m != nil {
		return m.Resolver
	}
	return nil
}

type Resolver struct {
	// The name of this Resolver.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Opaque configuration for this Resolver.
	Config               map[string]*_struct.Struct `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Resolver) Reset()         { *m = Resolver{} }
func (m *Resolver) String() string { return proto.CompactTextString(m) }
func (*Resolver) ProtoMessage()    {}
func (*Resolver) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{4}
}

func (m *Resolver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resolver.Unmarshal(m, b)
}
func (m *Resolver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resolver.Marshal(b, m, deterministic)
}
func (m *Resolver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resolver.Merge(m, src)
}
func (m *Resolver) XXX_Size() int {
	return xxx_messageInfo_Resolver.Size(m)
}
func (m *Resolver) XXX_DiscardUnknown() {
	xxx_messageInfo_Resolver.DiscardUnknown(m)
}

var xxx_messageInfo_Resolver proto.InternalMessageInfo

func (m *Resolver) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resolver) GetConfig() map[string]*_struct.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

// String is a message that contains one string entry. This makes it easier for
// the opaque metadata maps to be unmarshahled. Surely there is a better way.
type String struct {
	// The strings.
	Strings              []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *String) Reset()         { *m = String{} }
func (m *String) String() string { return proto.CompactTextString(m) }
func (*String) ProtoMessage()    {}
func (*String) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{5}
}

func (m *String) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_String.Unmarshal(m, b)
}
func (m *String) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_String.Marshal(b, m, deterministic)
}
func (m *String) XXX_Merge(src proto.Message) {
	xxx_messageInfo_String.Merge(m, src)
}
func (m *String) XXX_Size() int {
	return xxx_messageInfo_String.Size(m)
}
func (m *String) XXX_DiscardUnknown() {
	xxx_messageInfo_String.DiscardUnknown(m)
}

var xxx_messageInfo_String proto.InternalMessageInfo

func (m *String) GetStrings() []string {
	if m != nil {
		return m.Strings
	}
	return nil
}

// Strings is an array of string's. This makes it easier for the opaque metadata
// maps to be unmarshaled. Surely there is a better way.
type Strings struct {
	// The strings.
	Strings              []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Strings) Reset()         { *m = Strings{} }
func (m *Strings) String() string { return proto.CompactTextString(m) }
func (*Strings) ProtoMessage()    {}
func (*Strings) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{6}
}

func (m *Strings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Strings.Unmarshal(m, b)
}
func (m *Strings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Strings.Marshal(b, m, deterministic)
}
func (m *Strings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strings.Merge(m, src)
}
func (m *Strings) XXX_Size() int {
	return xxx_messageInfo_Strings.Size(m)
}
func (m *Strings) XXX_DiscardUnknown() {
	xxx_messageInfo_Strings.DiscardUnknown(m)
}

var xxx_messageInfo_Strings proto.InternalMessageInfo

func (m *Strings) GetStrings() []string {
	if m != nil {
		return m.Strings
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRepositoriesRequest)(nil), "ListRepositoriesRequest")
	proto.RegisterType((*ListRepositoriesResponse)(nil), "ListRepositoriesResponse")
	proto.RegisterType((*Repository)(nil), "Repository")
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterType((*Resolver)(nil), "Resolver")
	proto.RegisterMapType((map[string]*_struct.Struct)(nil), "Resolver.ConfigEntry")
	proto.RegisterType((*String)(nil), "String")
	proto.RegisterType((*Strings)(nil), "Strings")
}

func init() { proto.RegisterFile("v1/node.proto", fileDescriptor_888d560924a23fce) }

var fileDescriptor_888d560924a23fce = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0xc9, 0x6e, 0x36, 0x6d, 0x26, 0x45, 0xaa, 0x2c, 0xa1, 0xba, 0x81, 0xc3, 0xca, 0x08,
	0x29, 0x97, 0x3a, 0x22, 0x5c, 0x10, 0x47, 0x10, 0x07, 0x04, 0xe2, 0xe0, 0x8a, 0x03, 0xdc, 0x76,
	0x37, 0xd3, 0xc8, 0x22, 0xd8, 0xc1, 0x76, 0x22, 0xed, 0x8b, 0x70, 0xe7, 0x4d, 0x91, 0x9d, 0x6c,
	0x68, 0xa1, 0xdb, 0xdb, 0xcc, 0x37, 0x7f, 0x26, 0xff, 0x8c, 0x07, 0x1e, 0x0f, 0x2f, 0x4b, 0xa5,
	0x6b, 0xe4, 0x9d, 0xd1, 0x4e, 0xe7, 0xcf, 0x1a, 0xad, 0x9b, 0x16, 0xcb, 0x90, 0x6d, 0xfb, 0x9b,
	0xd2, 0x3a, 0xd3, 0xef, 0xdc, 0x58, 0x65, 0x97, 0x70, 0xf1, 0x49, 0x5a, 0x27, 0xb0, 0xd3, 0x56,
	0x3a, 0x6d, 0x24, 0x5a, 0x81, 0x3f, 0x7b, 0xb4, 0x8e, 0x7d, 0x04, 0xfa, 0x7f, 0xc9, 0x76, 0x5a,
	0x59, 0x24, 0x25, 0x9c, 0x99, 0x5b, 0x9c, 0x46, 0xeb, 0x65, 0x91, 0x55, 0x19, 0x9f, 0xc5, 0x7b,
	0x71, 0x47, 0xc0, 0xbe, 0x02, 0xfc, 0xad, 0x11, 0x02, 0xb1, 0xda, 0xfc, 0x40, 0x1a, 0xad, 0xa3,
	0x22, 0x15, 0x21, 0x26, 0x39, 0x9c, 0x1a, 0x1c, 0xa4, 0x95, 0x5a, 0xd1, 0x45, 0xe0, 0x73, 0x4e,
	0x9e, 0xc2, 0xca, 0x4f, 0x64, 0xe9, 0x32, 0xfc, 0x67, 0xc5, 0x3f, 0xeb, 0x1a, 0xc5, 0xc8, 0xd8,
	0xaf, 0x08, 0x62, 0x9f, 0xdf, 0xdb, 0x95, 0xc1, 0x59, 0x8d, 0x1d, 0xaa, 0x1a, 0xd5, 0xce, 0x1b,
	0x5d, 0xac, 0x97, 0x45, 0x2a, 0xee, 0x30, 0x52, 0x42, 0xd2, 0x6e, 0xb6, 0xd8, 0xfa, 0xf6, 0x51,
	0x91, 0x55, 0x17, 0x7c, 0x5c, 0x19, 0x3f, 0xac, 0x8c, 0x5f, 0x87, 0x95, 0x89, 0x49, 0x46, 0x5e,
	0x78, 0xab, 0x56, 0xb7, 0x03, 0x1a, 0x1a, 0x87, 0x4f, 0x52, 0x2e, 0x26, 0x20, 0xe6, 0x12, 0xfb,
	0x1d, 0xc1, 0xe9, 0x01, 0xdf, 0x6b, 0xee, 0x0a, 0x92, 0x9d, 0x56, 0x37, 0xb2, 0x09, 0xb6, 0xb2,
	0xea, 0xc9, 0xdc, 0x85, 0xbf, 0x0b, 0xfc, 0xbd, 0x72, 0x66, 0x2f, 0x26, 0x51, 0x2e, 0x20, 0xbb,
	0x85, 0xc9, 0x39, 0x2c, 0xbf, 0xe3, 0x7e, 0x6a, 0xe8, 0x43, 0x72, 0x05, 0xab, 0x61, 0xd3, 0xf6,
	0x18, 0xf6, 0xf7, 0xc0, 0x1c, 0xa3, 0xea, 0xcd, 0xe2, 0x75, 0xc4, 0x18, 0x24, 0xd7, 0xce, 0x48,
	0xd5, 0x10, 0x0a, 0x27, 0x36, 0x44, 0xe3, 0x6b, 0xa6, 0xe2, 0x90, 0xb2, 0xe7, 0x70, 0x32, 0x6a,
	0xec, 0x71, 0x51, 0xf5, 0xc5, 0xcf, 0xda, 0x48, 0xeb, 0x9d, 0x7d, 0x80, 0xf3, 0x7f, 0x2f, 0x87,
	0x50, 0x7e, 0xe4, 0xce, 0xf2, 0x4b, 0x7e, 0xec, 0xcc, 0xd8, 0xa3, 0xb7, 0xc9, 0xb7, 0xd8, 0xbf,
	0xf2, 0x36, 0x09, 0x33, 0xbc, 0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0x21, 0x3f, 0x49, 0x0d, 0xdd,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	// List the projects that this service knows about.
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/Registry/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	// List the projects that this service knows about.
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
}

// UnimplementedRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (*UnimplementedRegistryServer) ListRepositories(ctx context.Context, req *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Registry/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositories",
			Handler:    _Registry_ListRepositories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/node.proto",
}
