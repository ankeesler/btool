// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/node.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListRepositoriesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRepositoriesRequest) Reset()         { *m = ListRepositoriesRequest{} }
func (m *ListRepositoriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListRepositoriesRequest) ProtoMessage()    {}
func (*ListRepositoriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{0}
}

func (m *ListRepositoriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoriesRequest.Unmarshal(m, b)
}
func (m *ListRepositoriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoriesRequest.Marshal(b, m, deterministic)
}
func (m *ListRepositoriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoriesRequest.Merge(m, src)
}
func (m *ListRepositoriesRequest) XXX_Size() int {
	return xxx_messageInfo_ListRepositoriesRequest.Size(m)
}
func (m *ListRepositoriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoriesRequest proto.InternalMessageInfo

type ListRepositoriesResponse struct {
	// The list of requested repositories.
	Repositories         []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListRepositoriesResponse) Reset()         { *m = ListRepositoriesResponse{} }
func (m *ListRepositoriesResponse) String() string { return proto.CompactTextString(m) }
func (*ListRepositoriesResponse) ProtoMessage()    {}
func (*ListRepositoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{1}
}

func (m *ListRepositoriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoriesResponse.Unmarshal(m, b)
}
func (m *ListRepositoriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoriesResponse.Marshal(b, m, deterministic)
}
func (m *ListRepositoriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoriesResponse.Merge(m, src)
}
func (m *ListRepositoriesResponse) XXX_Size() int {
	return xxx_messageInfo_ListRepositoriesResponse.Size(m)
}
func (m *ListRepositoriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoriesResponse proto.InternalMessageInfo

func (m *ListRepositoriesResponse) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

type Repository struct {
	// The name of the repository.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The revision of this repository.
	//
	// This should be different for every mutation of the repository (i.e., when the
	// Nodes change in this repository, this string should change.
	//
	// Said another way, this version should change iff any Node data changes in
	// this repository.
	Revision string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// The btool Nodes in this repository.
	Nodes                []*Node  `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{2}
}

func (m *Repository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository.Unmarshal(m, b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return xxx_messageInfo_Repository.Size(m)
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *Repository) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Node struct {
	// The name of this Node.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The names of the dependencies of this Node.
	Dependencies []string `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// Opaque metadata associated with this Node.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// This Node's Resolver.
	Resolver             *Resolver `protobuf:"bytes,4,opt,name=resolver,proto3" json:"resolver,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{3}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Node) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Node) GetResolver() *Resolver {
	if m != nil {
		return m.Resolver
	}
	return nil
}

type Resolver struct {
	// The name of this Resolver.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Opaque configuration for this Resolver.
	Config               map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Resolver) Reset()         { *m = Resolver{} }
func (m *Resolver) String() string { return proto.CompactTextString(m) }
func (*Resolver) ProtoMessage()    {}
func (*Resolver) Descriptor() ([]byte, []int) {
	return fileDescriptor_888d560924a23fce, []int{4}
}

func (m *Resolver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resolver.Unmarshal(m, b)
}
func (m *Resolver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resolver.Marshal(b, m, deterministic)
}
func (m *Resolver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resolver.Merge(m, src)
}
func (m *Resolver) XXX_Size() int {
	return xxx_messageInfo_Resolver.Size(m)
}
func (m *Resolver) XXX_DiscardUnknown() {
	xxx_messageInfo_Resolver.DiscardUnknown(m)
}

var xxx_messageInfo_Resolver proto.InternalMessageInfo

func (m *Resolver) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resolver) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRepositoriesRequest)(nil), "ListRepositoriesRequest")
	proto.RegisterType((*ListRepositoriesResponse)(nil), "ListRepositoriesResponse")
	proto.RegisterType((*Repository)(nil), "Repository")
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterMapType((map[string]string)(nil), "Node.LabelsEntry")
	proto.RegisterType((*Resolver)(nil), "Resolver")
	proto.RegisterMapType((map[string]string)(nil), "Resolver.ConfigEntry")
}

func init() { proto.RegisterFile("v1/node.proto", fileDescriptor_888d560924a23fce) }

var fileDescriptor_888d560924a23fce = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x40, 0x2d, 0x2d, 0x0d, 0x4c, 0xd1, 0xe0, 0x46, 0x63, 0xc1, 0x4b, 0xb3, 0x89, 0x49, 0x3d,
	0xb8, 0xc4, 0x7a, 0x51, 0x8f, 0x1a, 0x0f, 0x46, 0xe2, 0x61, 0x6f, 0xea, 0x09, 0xe8, 0x68, 0x1a,
	0xeb, 0x6e, 0xed, 0x96, 0x26, 0xfc, 0x81, 0xff, 0xe6, 0x4f, 0x99, 0x5d, 0x4a, 0x01, 0x85, 0x83,
	0xb7, 0x9d, 0x37, 0xd3, 0xe9, 0x9b, 0xdd, 0x81, 0xdd, 0xf2, 0x7c, 0x20, 0x64, 0x8c, 0x2c, 0xcb,
	0x65, 0x21, 0x69, 0x0f, 0x8e, 0x86, 0x89, 0x2a, 0x38, 0x66, 0x52, 0x25, 0x85, 0xcc, 0x13, 0x54,
	0x1c, 0x3f, 0xa7, 0xa8, 0x0a, 0xfa, 0x00, 0xfe, 0xdf, 0x94, 0xca, 0xa4, 0x50, 0x48, 0x06, 0xd0,
	0xc9, 0x57, 0xb8, 0x6f, 0x05, 0x76, 0xe8, 0x45, 0x1e, 0xab, 0x8b, 0x67, 0x7c, 0xad, 0x80, 0x3e,
	0x01, 0x2c, 0x73, 0x84, 0x80, 0x23, 0x46, 0x1f, 0xe8, 0x5b, 0x81, 0x15, 0xb6, 0xb9, 0x39, 0x93,
	0x3e, 0xb4, 0x72, 0x2c, 0x13, 0x95, 0x48, 0xe1, 0x37, 0x0c, 0xaf, 0x63, 0x72, 0x0c, 0x4d, 0xed,
	0xac, 0x7c, 0xdb, 0xfc, 0xa7, 0xc9, 0x1e, 0x65, 0x8c, 0x7c, 0xce, 0xe8, 0xb7, 0x05, 0x8e, 0x8e,
	0x37, 0x76, 0xa5, 0xd0, 0x89, 0x31, 0x43, 0x11, 0xa3, 0x98, 0x68, 0xd1, 0x46, 0x60, 0x87, 0x6d,
	0xbe, 0xc6, 0xc8, 0x29, 0xb8, 0xe9, 0x68, 0x8c, 0xe9, 0xa2, 0xfd, 0xbe, 0x69, 0xcf, 0x86, 0x86,
	0xdd, 0x89, 0x22, 0x9f, 0xf1, 0xaa, 0x80, 0x9c, 0x68, 0x49, 0x25, 0xd3, 0x12, 0x73, 0xdf, 0x09,
	0xac, 0xd0, 0x8b, 0xda, 0x8c, 0x57, 0x80, 0xd7, 0xa9, 0xfe, 0x15, 0x78, 0x2b, 0x5f, 0x93, 0x2e,
	0xd8, 0xef, 0x38, 0xab, 0xbc, 0xf4, 0x91, 0x1c, 0x40, 0xb3, 0x1c, 0xa5, 0x53, 0xac, 0x26, 0x9d,
	0x07, 0xd7, 0x8d, 0x4b, 0x8b, 0x7e, 0x59, 0xd0, 0x5a, 0x74, 0xdc, 0x38, 0xd1, 0x19, 0xb8, 0x13,
	0x29, 0x5e, 0x93, 0x37, 0x33, 0x8b, 0x17, 0x1d, 0xd6, 0x02, 0xec, 0xd6, 0xf0, 0xca, 0x78, 0x5e,
	0xa4, 0x55, 0x56, 0xf0, 0x7f, 0x54, 0xa2, 0x17, 0xd8, 0x33, 0xf7, 0xbc, 0x7c, 0xb7, 0x7b, 0xe8,
	0xfe, 0x5e, 0x09, 0xe2, 0xb3, 0x2d, 0x0b, 0xd4, 0xef, 0xb1, 0x6d, 0xfb, 0x43, 0x77, 0x6e, 0xdc,
	0x67, 0x47, 0x3f, 0xdf, 0xd8, 0x35, 0x7b, 0x78, 0xf1, 0x13, 0x00, 0x00, 0xff, 0xff, 0x35, 0x26,
	0xf0, 0x9d, 0x98, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeRepositoryClient is the client API for NodeRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeRepositoryClient interface {
	// List the projects that this service knows about.
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
}

type nodeRepositoryClient struct {
	cc *grpc.ClientConn
}

func NewNodeRepositoryClient(cc *grpc.ClientConn) NodeRepositoryClient {
	return &nodeRepositoryClient{cc}
}

func (c *nodeRepositoryClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/NodeRepository/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeRepositoryServer is the server API for NodeRepository service.
type NodeRepositoryServer interface {
	// List the projects that this service knows about.
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
}

// UnimplementedNodeRepositoryServer can be embedded to have forward compatible implementations.
type UnimplementedNodeRepositoryServer struct {
}

func (*UnimplementedNodeRepositoryServer) ListRepositories(ctx context.Context, req *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}

func RegisterNodeRepositoryServer(s *grpc.Server, srv NodeRepositoryServer) {
	s.RegisterService(&_NodeRepository_serviceDesc, srv)
}

func _NodeRepository_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRepositoryServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeRepository/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRepositoryServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeRepository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NodeRepository",
	HandlerType: (*NodeRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositories",
			Handler:    _NodeRepository_ListRepositories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/node.proto",
}
