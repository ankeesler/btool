syntax = "proto3";

import "google/protobuf/struct.proto";

option go_package = "node";

// Registry API
//
// The Registry API is used to get collections of btool Nodes.
service Registry {
  // List the projects that this service knows about.
  rpc ListRepositories(ListRepositoriesRequest) returns (ListRepositoriesResponse) {}
}

message ListRepositoriesRequest {
}

message ListRepositoriesResponse {
  // The list of requested repositories.
  repeated Repository repositories = 1;
}

message Repository {
  // The name of the repository.
  string name = 1;

  // The revision of this repository.
  //
  // This should be different for every mutation of the repository (i.e., when the
  // Nodes change in this repository, this string should change.
  //
  // Said another way, this version should change iff any Node data changes in
  // this repository.
  string revision = 2;

  // The btool Nodes in this repository.
  repeated Node nodes = 3;
}

message Node {
  // The name of this Node.
  string name = 1;

  // The names of the dependencies of this Node.
  repeated string dependencies = 2;

  // Opaque metadata associated with this Node.
  google.protobuf.Struct labels = 3;

  // This Node's Resolver.
  Resolver resolver = 4;
}

message Resolver {
  // The name of this Resolver.
  string name = 1;

  // Opaque configuration for this Resolver.
  map<string, google.protobuf.Struct> config = 2;
}

// String is a message that contains one string entry. This makes it easier for
// the opaque metadata maps to be unmarshahled. Surely there is a better way.
message String {
  // The strings.
  repeated string strings = 1;
}

// Strings is an array of string's. This makes it easier for the opaque metadata
// maps to be unmarshaled. Surely there is a better way.
message Strings {
  // The strings.
  repeated string strings = 1;
}
