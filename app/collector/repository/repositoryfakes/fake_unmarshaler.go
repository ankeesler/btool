// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"sync"

	"github.com/ankeesler/btool/app/collector"
	"github.com/ankeesler/btool/app/collector/repository"
	"github.com/ankeesler/btool/node"
	nodea "github.com/ankeesler/btool/node/api/v1"
)

type FakeUnmarshaler struct {
	UnmarshalStub        func(collector.Store, *nodea.Node, string) (*node.Node, error)
	unmarshalMutex       sync.RWMutex
	unmarshalArgsForCall []struct {
		arg1 collector.Store
		arg2 *nodea.Node
		arg3 string
	}
	unmarshalReturns struct {
		result1 *node.Node
		result2 error
	}
	unmarshalReturnsOnCall map[int]struct {
		result1 *node.Node
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUnmarshaler) Unmarshal(arg1 collector.Store, arg2 *nodea.Node, arg3 string) (*node.Node, error) {
	fake.unmarshalMutex.Lock()
	ret, specificReturn := fake.unmarshalReturnsOnCall[len(fake.unmarshalArgsForCall)]
	fake.unmarshalArgsForCall = append(fake.unmarshalArgsForCall, struct {
		arg1 collector.Store
		arg2 *nodea.Node
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Unmarshal", []interface{}{arg1, arg2, arg3})
	fake.unmarshalMutex.Unlock()
	if fake.UnmarshalStub != nil {
		return fake.UnmarshalStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unmarshalReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUnmarshaler) UnmarshalCallCount() int {
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	return len(fake.unmarshalArgsForCall)
}

func (fake *FakeUnmarshaler) UnmarshalCalls(stub func(collector.Store, *nodea.Node, string) (*node.Node, error)) {
	fake.unmarshalMutex.Lock()
	defer fake.unmarshalMutex.Unlock()
	fake.UnmarshalStub = stub
}

func (fake *FakeUnmarshaler) UnmarshalArgsForCall(i int) (collector.Store, *nodea.Node, string) {
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	argsForCall := fake.unmarshalArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUnmarshaler) UnmarshalReturns(result1 *node.Node, result2 error) {
	fake.unmarshalMutex.Lock()
	defer fake.unmarshalMutex.Unlock()
	fake.UnmarshalStub = nil
	fake.unmarshalReturns = struct {
		result1 *node.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeUnmarshaler) UnmarshalReturnsOnCall(i int, result1 *node.Node, result2 error) {
	fake.unmarshalMutex.Lock()
	defer fake.unmarshalMutex.Unlock()
	fake.UnmarshalStub = nil
	if fake.unmarshalReturnsOnCall == nil {
		fake.unmarshalReturnsOnCall = make(map[int]struct {
			result1 *node.Node
			result2 error
		})
	}
	fake.unmarshalReturnsOnCall[i] = struct {
		result1 *node.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeUnmarshaler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unmarshalMutex.RLock()
	defer fake.unmarshalMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUnmarshaler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.Unmarshaler = new(FakeUnmarshaler)
