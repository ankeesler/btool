// Code generated by counterfeiter. DO NOT EDIT.
package builderfakes

import (
	"sync"

	"github.com/ankeesler/btool/app/builder"
	"github.com/ankeesler/btool/node"
)

type FakeCurrenter struct {
	CurrentStub        func(*node.Node) (bool, error)
	currentMutex       sync.RWMutex
	currentArgsForCall []struct {
		arg1 *node.Node
	}
	currentReturns struct {
		result1 bool
		result2 error
	}
	currentReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCurrenter) Current(arg1 *node.Node) (bool, error) {
	fake.currentMutex.Lock()
	ret, specificReturn := fake.currentReturnsOnCall[len(fake.currentArgsForCall)]
	fake.currentArgsForCall = append(fake.currentArgsForCall, struct {
		arg1 *node.Node
	}{arg1})
	fake.recordInvocation("Current", []interface{}{arg1})
	fake.currentMutex.Unlock()
	if fake.CurrentStub != nil {
		return fake.CurrentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.currentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCurrenter) CurrentCallCount() int {
	fake.currentMutex.RLock()
	defer fake.currentMutex.RUnlock()
	return len(fake.currentArgsForCall)
}

func (fake *FakeCurrenter) CurrentCalls(stub func(*node.Node) (bool, error)) {
	fake.currentMutex.Lock()
	defer fake.currentMutex.Unlock()
	fake.CurrentStub = stub
}

func (fake *FakeCurrenter) CurrentArgsForCall(i int) *node.Node {
	fake.currentMutex.RLock()
	defer fake.currentMutex.RUnlock()
	argsForCall := fake.currentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCurrenter) CurrentReturns(result1 bool, result2 error) {
	fake.currentMutex.Lock()
	defer fake.currentMutex.Unlock()
	fake.CurrentStub = nil
	fake.currentReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCurrenter) CurrentReturnsOnCall(i int, result1 bool, result2 error) {
	fake.currentMutex.Lock()
	defer fake.currentMutex.Unlock()
	fake.CurrentStub = nil
	if fake.currentReturnsOnCall == nil {
		fake.currentReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.currentReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCurrenter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.currentMutex.RLock()
	defer fake.currentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCurrenter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ builder.Currenter = new(FakeCurrenter)
