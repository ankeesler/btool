// Code generated by counterfeiter. DO NOT EDIT.
package runnerfakes

import (
	"sync"

	"github.com/ankeesler/btool/app/runner"
	"github.com/ankeesler/btool/node"
)

type FakeCallback struct {
	OnRunStub        func(*node.Node)
	onRunMutex       sync.RWMutex
	onRunArgsForCall []struct {
		arg1 *node.Node
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCallback) OnRun(arg1 *node.Node) {
	fake.onRunMutex.Lock()
	fake.onRunArgsForCall = append(fake.onRunArgsForCall, struct {
		arg1 *node.Node
	}{arg1})
	fake.recordInvocation("OnRun", []interface{}{arg1})
	fake.onRunMutex.Unlock()
	if fake.OnRunStub != nil {
		fake.OnRunStub(arg1)
	}
}

func (fake *FakeCallback) OnRunCallCount() int {
	fake.onRunMutex.RLock()
	defer fake.onRunMutex.RUnlock()
	return len(fake.onRunArgsForCall)
}

func (fake *FakeCallback) OnRunCalls(stub func(*node.Node)) {
	fake.onRunMutex.Lock()
	defer fake.onRunMutex.Unlock()
	fake.OnRunStub = stub
}

func (fake *FakeCallback) OnRunArgsForCall(i int) *node.Node {
	fake.onRunMutex.RLock()
	defer fake.onRunMutex.RUnlock()
	argsForCall := fake.onRunArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCallback) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onRunMutex.RLock()
	defer fake.onRunMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCallback) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runner.Callback = new(FakeCallback)
