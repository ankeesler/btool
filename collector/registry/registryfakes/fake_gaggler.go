// Code generated by counterfeiter. DO NOT EDIT.
package registryfakes

import (
	"sync"

	"github.com/ankeesler/btool/collector/registry"
	registrya "github.com/ankeesler/btool/registry"
)

type FakeGaggler struct {
	GaggleStub        func() *registrya.Gaggle
	gaggleMutex       sync.RWMutex
	gaggleArgsForCall []struct {
	}
	gaggleReturns struct {
		result1 *registrya.Gaggle
	}
	gaggleReturnsOnCall map[int]struct {
		result1 *registrya.Gaggle
	}
	RootStub        func() string
	rootMutex       sync.RWMutex
	rootArgsForCall []struct {
	}
	rootReturns struct {
		result1 string
	}
	rootReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGaggler) Gaggle() *registrya.Gaggle {
	fake.gaggleMutex.Lock()
	ret, specificReturn := fake.gaggleReturnsOnCall[len(fake.gaggleArgsForCall)]
	fake.gaggleArgsForCall = append(fake.gaggleArgsForCall, struct {
	}{})
	fake.recordInvocation("Gaggle", []interface{}{})
	fake.gaggleMutex.Unlock()
	if fake.GaggleStub != nil {
		return fake.GaggleStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.gaggleReturns
	return fakeReturns.result1
}

func (fake *FakeGaggler) GaggleCallCount() int {
	fake.gaggleMutex.RLock()
	defer fake.gaggleMutex.RUnlock()
	return len(fake.gaggleArgsForCall)
}

func (fake *FakeGaggler) GaggleCalls(stub func() *registrya.Gaggle) {
	fake.gaggleMutex.Lock()
	defer fake.gaggleMutex.Unlock()
	fake.GaggleStub = stub
}

func (fake *FakeGaggler) GaggleReturns(result1 *registrya.Gaggle) {
	fake.gaggleMutex.Lock()
	defer fake.gaggleMutex.Unlock()
	fake.GaggleStub = nil
	fake.gaggleReturns = struct {
		result1 *registrya.Gaggle
	}{result1}
}

func (fake *FakeGaggler) GaggleReturnsOnCall(i int, result1 *registrya.Gaggle) {
	fake.gaggleMutex.Lock()
	defer fake.gaggleMutex.Unlock()
	fake.GaggleStub = nil
	if fake.gaggleReturnsOnCall == nil {
		fake.gaggleReturnsOnCall = make(map[int]struct {
			result1 *registrya.Gaggle
		})
	}
	fake.gaggleReturnsOnCall[i] = struct {
		result1 *registrya.Gaggle
	}{result1}
}

func (fake *FakeGaggler) Root() string {
	fake.rootMutex.Lock()
	ret, specificReturn := fake.rootReturnsOnCall[len(fake.rootArgsForCall)]
	fake.rootArgsForCall = append(fake.rootArgsForCall, struct {
	}{})
	fake.recordInvocation("Root", []interface{}{})
	fake.rootMutex.Unlock()
	if fake.RootStub != nil {
		return fake.RootStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.rootReturns
	return fakeReturns.result1
}

func (fake *FakeGaggler) RootCallCount() int {
	fake.rootMutex.RLock()
	defer fake.rootMutex.RUnlock()
	return len(fake.rootArgsForCall)
}

func (fake *FakeGaggler) RootCalls(stub func() string) {
	fake.rootMutex.Lock()
	defer fake.rootMutex.Unlock()
	fake.RootStub = stub
}

func (fake *FakeGaggler) RootReturns(result1 string) {
	fake.rootMutex.Lock()
	defer fake.rootMutex.Unlock()
	fake.RootStub = nil
	fake.rootReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeGaggler) RootReturnsOnCall(i int, result1 string) {
	fake.rootMutex.Lock()
	defer fake.rootMutex.Unlock()
	fake.RootStub = nil
	if fake.rootReturnsOnCall == nil {
		fake.rootReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.rootReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeGaggler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.gaggleMutex.RLock()
	defer fake.gaggleMutex.RUnlock()
	fake.rootMutex.RLock()
	defer fake.rootMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGaggler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ registry.Gaggler = new(FakeGaggler)
