// Code generated by counterfeiter. DO NOT EDIT.
package collectorfakes

import (
	"sync"

	"github.com/ankeesler/btool/collector"
	"github.com/ankeesler/btool/node"
)

type FakeCollectini struct {
	CollectStub        func(*collector.Ctx, *node.Node) error
	collectMutex       sync.RWMutex
	collectArgsForCall []struct {
		arg1 *collector.Ctx
		arg2 *node.Node
	}
	collectReturns struct {
		result1 error
	}
	collectReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCollectini) Collect(arg1 *collector.Ctx, arg2 *node.Node) error {
	fake.collectMutex.Lock()
	ret, specificReturn := fake.collectReturnsOnCall[len(fake.collectArgsForCall)]
	fake.collectArgsForCall = append(fake.collectArgsForCall, struct {
		arg1 *collector.Ctx
		arg2 *node.Node
	}{arg1, arg2})
	fake.recordInvocation("Collect", []interface{}{arg1, arg2})
	fake.collectMutex.Unlock()
	if fake.CollectStub != nil {
		return fake.CollectStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.collectReturns
	return fakeReturns.result1
}

func (fake *FakeCollectini) CollectCallCount() int {
	fake.collectMutex.RLock()
	defer fake.collectMutex.RUnlock()
	return len(fake.collectArgsForCall)
}

func (fake *FakeCollectini) CollectCalls(stub func(*collector.Ctx, *node.Node) error) {
	fake.collectMutex.Lock()
	defer fake.collectMutex.Unlock()
	fake.CollectStub = stub
}

func (fake *FakeCollectini) CollectArgsForCall(i int) (*collector.Ctx, *node.Node) {
	fake.collectMutex.RLock()
	defer fake.collectMutex.RUnlock()
	argsForCall := fake.collectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCollectini) CollectReturns(result1 error) {
	fake.collectMutex.Lock()
	defer fake.collectMutex.Unlock()
	fake.CollectStub = nil
	fake.collectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCollectini) CollectReturnsOnCall(i int, result1 error) {
	fake.collectMutex.Lock()
	defer fake.collectMutex.Unlock()
	fake.CollectStub = nil
	if fake.collectReturnsOnCall == nil {
		fake.collectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.collectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCollectini) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.collectMutex.RLock()
	defer fake.collectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCollectini) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ collector.Collectini = new(FakeCollectini)
