// Code generated by counterfeiter. DO NOT EDIT.
package scannerfakes

import (
	"sync"

	"github.com/ankeesler/btool/scanner"
)

type FakeResolver struct {
	ResolveIncludeStub        func(string) (string, error)
	resolveIncludeMutex       sync.RWMutex
	resolveIncludeArgsForCall []struct {
		arg1 string
	}
	resolveIncludeReturns struct {
		result1 string
		result2 error
	}
	resolveIncludeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ResolveSourcesStub        func(string) ([]string, error)
	resolveSourcesMutex       sync.RWMutex
	resolveSourcesArgsForCall []struct {
		arg1 string
	}
	resolveSourcesReturns struct {
		result1 []string
		result2 error
	}
	resolveSourcesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResolver) ResolveInclude(arg1 string) (string, error) {
	fake.resolveIncludeMutex.Lock()
	ret, specificReturn := fake.resolveIncludeReturnsOnCall[len(fake.resolveIncludeArgsForCall)]
	fake.resolveIncludeArgsForCall = append(fake.resolveIncludeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ResolveInclude", []interface{}{arg1})
	fake.resolveIncludeMutex.Unlock()
	if fake.ResolveIncludeStub != nil {
		return fake.ResolveIncludeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resolveIncludeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResolver) ResolveIncludeCallCount() int {
	fake.resolveIncludeMutex.RLock()
	defer fake.resolveIncludeMutex.RUnlock()
	return len(fake.resolveIncludeArgsForCall)
}

func (fake *FakeResolver) ResolveIncludeCalls(stub func(string) (string, error)) {
	fake.resolveIncludeMutex.Lock()
	defer fake.resolveIncludeMutex.Unlock()
	fake.ResolveIncludeStub = stub
}

func (fake *FakeResolver) ResolveIncludeArgsForCall(i int) string {
	fake.resolveIncludeMutex.RLock()
	defer fake.resolveIncludeMutex.RUnlock()
	argsForCall := fake.resolveIncludeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResolver) ResolveIncludeReturns(result1 string, result2 error) {
	fake.resolveIncludeMutex.Lock()
	defer fake.resolveIncludeMutex.Unlock()
	fake.ResolveIncludeStub = nil
	fake.resolveIncludeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeResolver) ResolveIncludeReturnsOnCall(i int, result1 string, result2 error) {
	fake.resolveIncludeMutex.Lock()
	defer fake.resolveIncludeMutex.Unlock()
	fake.ResolveIncludeStub = nil
	if fake.resolveIncludeReturnsOnCall == nil {
		fake.resolveIncludeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.resolveIncludeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeResolver) ResolveSources(arg1 string) ([]string, error) {
	fake.resolveSourcesMutex.Lock()
	ret, specificReturn := fake.resolveSourcesReturnsOnCall[len(fake.resolveSourcesArgsForCall)]
	fake.resolveSourcesArgsForCall = append(fake.resolveSourcesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ResolveSources", []interface{}{arg1})
	fake.resolveSourcesMutex.Unlock()
	if fake.ResolveSourcesStub != nil {
		return fake.ResolveSourcesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.resolveSourcesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResolver) ResolveSourcesCallCount() int {
	fake.resolveSourcesMutex.RLock()
	defer fake.resolveSourcesMutex.RUnlock()
	return len(fake.resolveSourcesArgsForCall)
}

func (fake *FakeResolver) ResolveSourcesCalls(stub func(string) ([]string, error)) {
	fake.resolveSourcesMutex.Lock()
	defer fake.resolveSourcesMutex.Unlock()
	fake.ResolveSourcesStub = stub
}

func (fake *FakeResolver) ResolveSourcesArgsForCall(i int) string {
	fake.resolveSourcesMutex.RLock()
	defer fake.resolveSourcesMutex.RUnlock()
	argsForCall := fake.resolveSourcesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeResolver) ResolveSourcesReturns(result1 []string, result2 error) {
	fake.resolveSourcesMutex.Lock()
	defer fake.resolveSourcesMutex.Unlock()
	fake.ResolveSourcesStub = nil
	fake.resolveSourcesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeResolver) ResolveSourcesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.resolveSourcesMutex.Lock()
	defer fake.resolveSourcesMutex.Unlock()
	fake.ResolveSourcesStub = nil
	if fake.resolveSourcesReturnsOnCall == nil {
		fake.resolveSourcesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.resolveSourcesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveIncludeMutex.RLock()
	defer fake.resolveIncludeMutex.RUnlock()
	fake.resolveSourcesMutex.RLock()
	defer fake.resolveSourcesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scanner.Resolver = new(FakeResolver)
