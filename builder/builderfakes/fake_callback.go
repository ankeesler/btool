// Code generated by counterfeiter. DO NOT EDIT.
package builderfakes

import (
	"sync"

	"github.com/ankeesler/btool/builder"
)

type FakeCallback struct {
	OnResolveStub        func(string, bool)
	onResolveMutex       sync.RWMutex
	onResolveArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCallback) OnResolve(arg1 string, arg2 bool) {
	fake.onResolveMutex.Lock()
	fake.onResolveArgsForCall = append(fake.onResolveArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("OnResolve", []interface{}{arg1, arg2})
	fake.onResolveMutex.Unlock()
	if fake.OnResolveStub != nil {
		fake.OnResolveStub(arg1, arg2)
	}
}

func (fake *FakeCallback) OnResolveCallCount() int {
	fake.onResolveMutex.RLock()
	defer fake.onResolveMutex.RUnlock()
	return len(fake.onResolveArgsForCall)
}

func (fake *FakeCallback) OnResolveCalls(stub func(string, bool)) {
	fake.onResolveMutex.Lock()
	defer fake.onResolveMutex.Unlock()
	fake.OnResolveStub = stub
}

func (fake *FakeCallback) OnResolveArgsForCall(i int) (string, bool) {
	fake.onResolveMutex.RLock()
	defer fake.onResolveMutex.RUnlock()
	argsForCall := fake.onResolveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCallback) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onResolveMutex.RLock()
	defer fake.onResolveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCallback) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ builder.Callback = new(FakeCallback)
